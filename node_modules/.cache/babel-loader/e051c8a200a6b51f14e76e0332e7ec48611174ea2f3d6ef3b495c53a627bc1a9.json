{"ast":null,"code":"var _jsxFileName = \"E:\\\\_DOCUMENT\\\\Documents\\\\GitHub\\\\ProjetS4\\\\ProjetS4\\\\src\\\\contexts\\\\AuthContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext();\nexport const AuthProvider = ({\n  children\n}) => {\n  _s();\n  const [user, setUser] = useState(null);\n  const login = async (email, password) => {\n    if (email === 'test@example.com' && password === 'password') {\n      setUser({\n        email\n      });\n      return {\n        success: true\n      };\n    }\n    return {\n      success: false,\n      message: 'Invalid credentials'\n    };\n  };\n  const register = async data => {\n    try {\n      const response = await fetch('http://localhost:8000/api/register', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(data)\n      });\n      const result = await response.json();\n      if (response.ok) {\n        return {\n          success: true,\n          ...result\n        };\n      } else {\n        return {\n          success: false,\n          message: result.message || Object.values(result.errors || {}).join(' ')\n        };\n      }\n    } catch (err) {\n      return {\n        success: false,\n        message: 'Network error'\n      };\n    }\n  };\n  const logout = () => {\n    setUser(null);\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: {\n      user,\n      login,\n      register,\n      logout\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 39,\n    columnNumber: 5\n  }, this);\n};\n_s(AuthProvider, \"Iei9RGtZU29Y1RhBe1sbfh/MntA=\");\n_c = AuthProvider;\nexport const useAuth = () => {\n  _s2();\n  return useContext(AuthContext);\n};\n_s2(useAuth, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","jsxDEV","_jsxDEV","AuthContext","AuthProvider","children","_s","user","setUser","login","email","password","success","message","register","data","response","fetch","method","headers","body","JSON","stringify","result","json","ok","Object","values","errors","join","err","logout","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","useAuth","_s2","$RefreshReg$"],"sources":["E:/_DOCUMENT/Documents/GitHub/ProjetS4/ProjetS4/src/contexts/AuthContext.js"],"sourcesContent":["import React, { createContext, useContext, useState } from 'react';\r\n\r\nconst AuthContext = createContext();\r\n\r\nexport const AuthProvider = ({ children }) => {\r\n  const [user, setUser] = useState(null);\r\n\r\n  const login = async (email, password) => {\r\n    if (email === 'test@example.com' && password === 'password') {\r\n      setUser({ email });\r\n      return { success: true };\r\n    }\r\n    return { success: false, message: 'Invalid credentials' };\r\n  };\r\n\r\n  const register = async (data) => {\r\n    try {\r\n      const response = await fetch('http://localhost:8000/api/register', {\r\n        method: 'POST',\r\n        headers: { 'Content-Type': 'application/json' },\r\n        body: JSON.stringify(data),\r\n      });\r\n      const result = await response.json();\r\n      if (response.ok) {\r\n        return { success: true, ...result };\r\n      } else {\r\n        return { success: false, message: result.message || Object.values(result.errors || {}).join(' ') };\r\n      }\r\n    } catch (err) {\r\n      return { success: false, message: 'Network error' };\r\n    }\r\n  };\r\n\r\n  const logout = () => {\r\n    setUser(null);\r\n  };\r\n\r\n  return (\r\n    <AuthContext.Provider value={{ user, login, register, logout }}>\r\n      {children}\r\n    </AuthContext.Provider>\r\n  );\r\n};\r\n\r\nexport const useAuth = () => useContext(AuthContext);\r\n"],"mappings":";;;AAAA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,UAAU,EAAEC,QAAQ,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEnE,MAAMC,WAAW,gBAAGL,aAAa,CAAC,CAAC;AAEnC,OAAO,MAAMM,YAAY,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,EAAA;EAC5C,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGR,QAAQ,CAAC,IAAI,CAAC;EAEtC,MAAMS,KAAK,GAAG,MAAAA,CAAOC,KAAK,EAAEC,QAAQ,KAAK;IACvC,IAAID,KAAK,KAAK,kBAAkB,IAAIC,QAAQ,KAAK,UAAU,EAAE;MAC3DH,OAAO,CAAC;QAAEE;MAAM,CAAC,CAAC;MAClB,OAAO;QAAEE,OAAO,EAAE;MAAK,CAAC;IAC1B;IACA,OAAO;MAAEA,OAAO,EAAE,KAAK;MAAEC,OAAO,EAAE;IAAsB,CAAC;EAC3D,CAAC;EAED,MAAMC,QAAQ,GAAG,MAAOC,IAAI,IAAK;IAC/B,IAAI;MACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,oCAAoC,EAAE;QACjEC,MAAM,EAAE,MAAM;QACdC,OAAO,EAAE;UAAE,cAAc,EAAE;QAAmB,CAAC;QAC/CC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACP,IAAI;MAC3B,CAAC,CAAC;MACF,MAAMQ,MAAM,GAAG,MAAMP,QAAQ,CAACQ,IAAI,CAAC,CAAC;MACpC,IAAIR,QAAQ,CAACS,EAAE,EAAE;QACf,OAAO;UAAEb,OAAO,EAAE,IAAI;UAAE,GAAGW;QAAO,CAAC;MACrC,CAAC,MAAM;QACL,OAAO;UAAEX,OAAO,EAAE,KAAK;UAAEC,OAAO,EAAEU,MAAM,CAACV,OAAO,IAAIa,MAAM,CAACC,MAAM,CAACJ,MAAM,CAACK,MAAM,IAAI,CAAC,CAAC,CAAC,CAACC,IAAI,CAAC,GAAG;QAAE,CAAC;MACpG;IACF,CAAC,CAAC,OAAOC,GAAG,EAAE;MACZ,OAAO;QAAElB,OAAO,EAAE,KAAK;QAAEC,OAAO,EAAE;MAAgB,CAAC;IACrD;EACF,CAAC;EAED,MAAMkB,MAAM,GAAGA,CAAA,KAAM;IACnBvB,OAAO,CAAC,IAAI,CAAC;EACf,CAAC;EAED,oBACEN,OAAA,CAACC,WAAW,CAAC6B,QAAQ;IAACC,KAAK,EAAE;MAAE1B,IAAI;MAAEE,KAAK;MAAEK,QAAQ;MAAEiB;IAAO,CAAE;IAAA1B,QAAA,EAC5DA;EAAQ;IAAA6B,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACW,CAAC;AAE3B,CAAC;AAAC/B,EAAA,CAtCWF,YAAY;AAAAkC,EAAA,GAAZlC,YAAY;AAwCzB,OAAO,MAAMmC,OAAO,GAAGA,CAAA;EAAAC,GAAA;EAAA,OAAMzC,UAAU,CAACI,WAAW,CAAC;AAAA;AAACqC,GAAA,CAAxCD,OAAO;AAAA,IAAAD,EAAA;AAAAG,YAAA,CAAAH,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}